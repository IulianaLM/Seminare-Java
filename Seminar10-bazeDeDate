import java.sql.DriverManager;
import java.sql.SQLOutput;
import java.util.ArrayList;
import java.util.Random;
import java.util.stream.Collectors;

class Tranzactie{
    int cod;
    String denumire;
    double pret;
    int cantitate;

    public Tranzactie(int cod, String denumire, double pret, int cantitate) {
        this.cod = cod;
        this.denumire = denumire;
        this.pret = pret;
        this.cantitate = cantitate;
    }

    public int getCod() {
        return cod;
    }

    public void setCod(int cod) {
        this.cod = cod;
    }

    public String getDenumire() {
        return denumire;
    }

    public void setDenumire(String denumire) {
        this.denumire = denumire;
    }

    public double getPret() {
        return pret;
    }

    public void setPret(double pret) {
        this.pret = pret;
    }

    public int getCantitate() {
        return cantitate;
    }

    public void setCantitate(int cantitate) {
        this.cantitate = cantitate;
    }

    @Override
    public String toString() {
        return "Tranzactie{" +
                "cod=" + cod +
                ", denumire='" + denumire + '\'' +
                ", pret=" + pret +
                ", cantitate=" + cantitate +
                '}';
    }
}

public class Main {
    final static  String DB_URL="jdbc:sqlite:tranzactii.db";
    static void genereazaBazaDeDate() throws Exception{
        final String[] denumiri={
                "Stafide 200g",
                "Seminte de pin 300g",
                "Bulion Topoloveana 190g",
                "Paine neagra Frontera",
                "Ceai verde Lipton"
        };

//        try(var conexiune= DriverManager.getConnection(DB_URL);
//            var comanda= conexiune.createStatement()){
//            comanda.executeUpdate("CREATE TABLE IF NOT EXISTS Tranzactii("+
//                    "CodProdus INTEGER, DenumireProdus STRING(100),"+
//                    "Pret REAL, Cantitate INTEGER)");
//            System.out.println("Am sters "
//                    + comanda.executeUpdate("DELETE FROM Tranzactii"));
//        }

        var random= new Random();
        try(var conexiune= DriverManager.getConnection(DB_URL);
            var comanda= conexiune.createStatement();
            var cmdInsert= conexiune.prepareStatement(
                    "INSERT INTO Tranzactii VALUES(?, ?, ?, ?)")){
            comanda.executeUpdate("CREATE TABLE IF NOT EXISTS Tranzactii("+
                    "CodProdus INTEGER, DenumireProdus STRING(100),"+
                    "Pret REAL, Cantitate INTEGER)");
            System.out.println("Am sters "
                    + comanda.executeUpdate("DELETE FROM Tranzactii"));

            for(int i=0;i< 10;i++){
                int cod= random.nextInt(denumiri.length);
                cmdInsert.setInt(1,cod);
                cmdInsert.setString(2,denumiri[cod]);
                cmdInsert.setDouble(3,random.nextDouble()*10);
                cmdInsert.setInt(4,1+random.nextInt(13));
                cmdInsert.executeUpdate();
            }

        }
    }


//    static void afiseazaStocuri()throws Exception{
//        var tranzactii= new ArrayList<Tranzactie>();
//        try(var conexiune= DriverManager.getConnection(DB_URL);
//        var comanda=conexiune.createStatement();
//        var cursor= comanda.executeQuery("SELECT * FROM Tranzactii")){
//            while(cursor.next()){
//                System.out.println(cursor.getString(2));
//            }
//        }
//
//    }

    static void afiseazaStocuri()throws Exception{
        var tranzactii= new ArrayList<Tranzactie>();
        try(var conexiune= DriverManager.getConnection(DB_URL);
            var comanda=conexiune.createStatement();
            var cursor= comanda.executeQuery("SELECT * FROM Tranzactii")){
            while(cursor.next()){
                tranzactii.add(new Tranzactie(
                        cursor.getInt(1),
                        cursor.getString(2),
                        cursor.getDouble(3),
                        cursor.getInt(4)
                ));
            }
        }
//        prima varianta de afisare
//        tranzactii.stream().forEach(System.out::println);

//        a doua varianta
        var produse= tranzactii.stream()
                .collect(Collectors.toMap(
                        Tranzactie::getCod,
                        Tranzactie::getDenumire,
                        (p1,p2)->p1));
        var tGrupate=tranzactii.stream()
                .collect(Collectors.groupingBy(Tranzactie::getCod));
//        System.out.println(produse);
        for(var cod: produse.keySet()){
//            var stoc= tGrupate.get(cod); //lista de tranzactii pt produsul respectiv
            var stoc=tGrupate.get(cod).stream()
                    .mapToInt(Tranzactie::getCantitate).sum();
            System.out.printf("%d %-30s %3d%n",
                    cod,produse.get(cod),stoc);
        }

    }
    public static void main(String[] args)throws Exception {
        genereazaBazaDeDate();
        afiseazaStocuri();


    }
}
